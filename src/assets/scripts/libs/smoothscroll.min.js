window.requestAnimFrame = (function () {
  return (
    window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    function (callback) {
      window.setTimeout(callback, 1000 / 60);
    }
  );
}());

/**
 *  @param {number} scrollTargetY
 *  @param {number} [speed]  - scroll speed, default value 1500
 *  @param {string} [easing] - scroll type 'easeOutSine', 'easeInOutSine' or 'easeInOutQuint', default value easeInOutQuint
 */

function scrollToY(scrollTargetY, speed, easing) {
  let scrollY = window.scrollY || document.documentElement.scrollTop,
    currentTime = 0;

  scrollTargetY = scrollTargetY || 0;
  speed = speed || 2000;
  easing = easing || 'easeOutSine';

  const time = Math.max(0.1, Math.min(Math.abs(scrollY - scrollTargetY) / speed, 0.8));

  const easingEquations = {
    easeOutSine(pos) {
      return Math.sin(pos * (Math.PI / 2));
    },
    easeInOutSine(pos) {
      return -0.5 * (Math.cos(Math.PI * pos) - 1);
    },
    easeInOutQuint(pos) {
      if ((pos /= 0.5) < 1) {
        return 0.5 * Math.pow(pos, 5);
      }
      return 0.5 * (Math.pow(pos - 2, 5) + 2);
    },
  };

  function tick() {
    currentTime += 1 / 60;

    const p = currentTime / time;
    const t = easingEquations[easing](p);

    if (p < 1) {
      requestAnimFrame(tick);
      window.scrollTo(0, scrollY + (scrollTargetY - scrollY) * t);
    } else {
      window.scrollTo(0, scrollTargetY);
    }
  }

  tick();
}

/**
 *  @param {object} menu - menu selector
 */

function menuControl(menu, scrollOffset) {

  const d = document.documentElement;
  const offset = d.scrollTop + window.innerHeight;
  const height = d.offsetHeight;
  let bottom;

  if (offset === height) {
    bottom = true;
  } else {
    bottom = false;
  }

  let scrollPos = window.scrollY || document.documentElement.scrollTop,
    links = menu.querySelectorAll('a[href^="#"]');

  for (let i = 0; i < links.length; i++) {
    let currLink = links[i],
      refElement = document.querySelector(currLink.getAttribute('href'));

    if (
      refElement.offsetTop <= scrollPos + scrollOffset &&
      refElement.offsetTop + refElement.clientHeight > scrollPos + scrollOffset &&
      !bottom
    ) {
      currLink.classList.add('active');
      links[links.length - 1].classList.remove('active');
    } else if (bottom) {
      currLink.classList.remove('active');
      links[links.length - 1].classList.add('active');
    } else {
      currLink.classList.remove('active');
    }
  }
}

/**
 *  @param {object} menu     - menu selector
 *  @param {number} [speed]  - scroll speed, default value 1500
 *  @param {string} [easing] - scroll type 'easeOutSine', 'easeInOutSine' or 'easeInOutQuint', default value easeInOutQuint
 */

function animated(menu, speed, easing, offset) {
  let calcOffset;

  // media query change
  function WidthChange(mq) {
    if (mq.matches) {
      calcOffset = offset;
    } else {
      calcOffset = 0;
    }
  }

  /* JavaScript Media Queries */
  if (matchMedia) {
    const mq = window.matchMedia('(min-width: 720px)');
    mq.addListener(WidthChange);
    WidthChange(mq);
  }

  let i,
    links = menu.querySelectorAll('a[href^="#"]');

  function control(e) {
    e.preventDefault();

    const target = document.querySelector(this.hash);
    scrollToY(target.offsetTop - calcOffset, speed, easing);
  }

  for (i = 0; i < links.length; i++) {
    const link = links[i];
    link.addEventListener('click', control);
  }
}

/**
 *  @param {object} menu     - menu selector
 *  @param {number} [speed]  - scroll speed, default value 1500
 *  @param {string} [easing] - scroll type 'easeOutSine', 'easeInOutSine' or 'easeInOutQuint', default value easeInOutQuint
 */

function scrollSpy(menu, speed, easing, offset, scrollOffset) {
  animated(menu, speed, easing, offset);

  document.addEventListener('scroll', () => {
    menuControl(menu, scrollOffset);
  });
}
